def OC_TOKEN
def OC_REGISTRY
pipeline {
    agent any    
    environment {
        IMAGE_NAME = 'aceapp6'
        OC_USER = 'admin'
        OC_PASSWORD = 'admin'
        OC_URL = 'https://inquiry1.fyre.ibm.com:8443'
        OC_PROJECT = 'test'
    }    
    stages {
        stage('Bar file Cleanup') { 
            steps { 
                dir("${WORKSPACE}/sample/bars_aceonly"){ 
                    sh ''' 
                        pwd
                        ls
                        echo "BEGIN STAGE: Bar file Cleanup" 
                        #ADD SHELL COMMANDS HERE TO CLEAN UP THE SAMPLES FOLDER
                        rm -rf *.bar
                        ls
                        echo "END STAGE: Bar file Cleanup" 
                    ''' 
                } 
            } 
        }
        stage('Download bar from git') { 
            steps { 
                dir("${WORKSPACE}"){ 
                    sh ''' 
                        pwd
                        ls
                        echo "BEGIN STAGE: Download ACE Bar File" 
                        python raw_file_download_from_git.py 
                        cd sample/bars_aceonly
                        ls 
                        echo "END STAGE: Download ACE Bar File" 
                    ''' 
                } 
            } 
        }
/*        stage('Build Docker image for Bar file') {
           agent {
               label 'docker-agent'
           }
            steps {
                script {
                    sh '''
                        ls
                        cd sample
                        docker build -t $IMAGE_NAME --file Dockerfile.aceonly .
                        docker images | grep $IMAGE_NAME
                        '''
                }
            }
        }
        stage('Initialization') {
           agent any
            steps {
                script {
                    sh """
                        /usr/local/bin/oc login -u $OC_USER -p $OC_PASSWORD $OC_URL --insecure-skip-tls-verify
                        oc project $OC_PROJECT
                    """
                    OC_TOKEN = sh(script: 'oc whoami -t', returnStdout: true)
                    OC_REGISTRY = sh(script: 'echo -n $(oc registry info)', returnStdout: true)
                }
            }
        }
        stage('docker upload') {
            agent {
               label 'docker-agent'
            }
            steps {
                script {
                   
                   sh """
                        docker login  -u admin -p `echo -n $OC_TOKEN` ${OC_REGISTRY}
                        docker tag $IMAGE_NAME ${OC_REGISTRY}/$OC_PROJECT/$IMAGE_NAME
                        docker push ${OC_REGISTRY}/$OC_PROJECT/$IMAGE_NAME
                    """
                }
            }
        }
        stage('Build App') {
           agent any
            steps {
                script {
                    sh """
                        /usr/local/bin/oc new-app -e LICENSE=accept -e ACE_SERVER_NAME=ACESERVER6 -e ACE_TRUSTSTORE_PASSWORD=truststorepwd -e ACE_KEYSTORE_PASSWORD=keystorepwd --image-stream=$OC_PROJECT/$IMAGE_NAME:latest --insecure-registry
                        oc expose svc/$IMAGE_NAME
                        oc expose svc/$IMAGE_NAME --name=${IMAGE_NAME}webui --hostname=${IMAGE_NAME}webui-test.router.default.svc.cluster.local --port=7800
                    """
                }
            }
        }*/
    }
}
